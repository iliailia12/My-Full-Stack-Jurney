// new Date() ქმნის ახალ Date ობიექტს
// constructor ქმნის ახალ Date ობიექტს
// constructor აბრუნებს ფუნქციას, რომელმაც შექმნა Date პროტოტიპი
// getDate() აბრუნებს თვის დღეს (1-31)
// getDay() აბრუნებს კვირის დღეს (0-6)
// getFullYear() აბრუნებს წელს
// getHours() აბრუნებს საათს (0-23)
// getMilliseconds() აბრუნებს მილიწამებს (0-999)
// getMinutes() აბრუნებს წუთებს (0-59)
// getMonth() აბრუნებს თვეს (0-11)
// getSeconds() აბრუნებს წამებს (0-59)
// getTime() აბრუნებს მილიწამების რაოდენობას 1970 წლის 1 იანვრის შუაღამის შემდეგ და მითითებულ თარიღს
// getTimezoneOffset() აბრუნებს დროის სხვაობას UTC დროსა და ადგილობრივ დროს შორის, წუთებში
// getUTCDate() აბრუნებს დღის დღეს თვე, უნივერსალური დროის მიხედვით (1-31-დან)
// getUTCDay() აბრუნებს კვირის დღეს, უნივერსალური დროის მიხედვით (0-6-დან)
// getUTCFullYear() აბრუნებს წელს, უნივერსალური დროის მიხედვით
// getUTCHours() აბრუნებს საათს, უნივერსალური დროის მიხედვით (0-23-დან)
// getUTCMilliseconds() აბრუნებს მილიწამებს, უნივერსალური დროის მიხედვით (0-999-დან)
// getUTCMinutes() აბრუნებს წუთებს, უნივერსალური დროის მიხედვით (0-59-დან)
// getUTCMonth() აბრუნებს თვეს, უნივერსალური დროის მიხედვით (0-11-დან)
// getUTCSeconds() აბრუნებს წამებს, უნივერსალური დროის მიხედვით (0-59-დან)
// getYear() მოძველებულია. გამოიყენეთ getFullYear() მეთოდი
// now() აბრუნებს მილიწამების რაოდენობას 1970 წლის 1 იანვრის შუაღამის შემდეგ
// parse() აანალიზებს თარიღის სტრიქონს და აბრუნებს მილიწამების რაოდენობას 1970 წლის 1 იანვრიდან
// prototype საშუალებას გაძლევთ დაამატოთ თვისებები და მეთოდები ობიექტს
// setDate() ადგენს თარიღის ობიექტის თვის დღეს
// setFullYear() ადგენს თარიღის ობიექტის წელს
// setHours() ადგენს თარიღის ობიექტის საათს
// setMilliseconds() ადგენს თარიღის ობიექტის მილიწამებს
// setMinutes() ადგენს თარიღის ობიექტის წუთებს
// setMonth() ადგენს თარიღის ობიექტის თვეს
// setSeconds() ადგენს თარიღის ობიექტის წამებს
// setTime() ადგენს თარიღს მილიწამების მითითებული რაოდენობით 1970 წლის 1 იანვრის შემდეგ/ადრე
// setUTCDate() ადგენს თარიღის ობიექტის თვის დღეს, უნივერსალური დროის მიხედვით
// setUTCFullYear() ადგენს წელიწადს თარიღის ობიექტი, უნივერსალური დროის მიხედვით
// setUTCHours() ადგენს თარიღის ობიექტის საათს, უნივერსალური დროის მიხედვით
// setUTCMilliseconds() ადგენს თარიღის ობიექტის მილიწამებს, უნივერსალური დროის მიხედვით
// setUTCMinutes() ადგენს თარიღის ობიექტის წუთებს, უნივერსალური დროის მიხედვით
// setUTCMonth() ადგენს თარიღის ობიექტის თვეს, უნივერსალური დროის მიხედვით
// setUTCSeconds() ადგენს თარიღის ობიექტის წამებს, უნივერსალური დროის მიხედვით
// setYear() მოძველებულია. მის ნაცვლად გამოიყენეთ setFullYear() მეთოდი
// toDateString() გარდაქმნის თარიღის ობიექტის თარიღის ნაწილს წაკითხვად სტრიქონად
// toGMTString() მოძველებულია. გამოიყენეთ toUTCString() მეთოდი
// toISOString() აბრუნებს თარიღს სტრიქონის სახით, ISO სტანდარტის გამოყენებით
// toJSON() აბრუნებს თარიღს სტრიქონის სახით, ფორმატირებული როგორც JSON თარიღი
// toLocaleDateString() აბრუნებს Date ობიექტის თარიღის ნაწილს სტრიქონის სახით, ლოკალური კონვენციების გამოყენებით
// toLocaleTimeString() აბრუნებს Date ობიექტის დროის ნაწილს სტრიქონის სახით, ლოკალური კონვენციების გამოყენებით
// toLocaleString() გარდაქმნის Date ობიექტს სტრიქონად, ლოკალური კონვენციების გამოყენებით
// toString() გარდაქმნის Date ობიექტს სტრიქონად
// toTimeString() გარდაქმნის Date ობიექტის დროის ნაწილს სტრიქონად
// toUTCString() გარდაქმნის Date ობიექტს სტრიქონად, უნივერსალური დროის მიხედვით
// UTC() აბრუნებს თარიღში მილიწამების რაოდენობას 1970 წლის 1 იანვრის შუაღამის შემდეგ, UTC დროის მიხედვით
// valueOf() აბრუნებს Date ობიექტის პრიმიტიულ მნიშვნელობას