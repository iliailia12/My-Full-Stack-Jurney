# lesson22
# Learn Python ITERABLES

# Python-ში iterable არის ნებისმიერი ობიექტი, რომელსაც შეუძლია დააბრუნოს თავისი ელემენტები ერთდროულად,
# რაც საშუალებას აძლევს მას გადაიტანოს for-loop-ში ან გაიგოს სიის გაგებაში. iterable-ების საერთო მაგალითებია სიები, ტოპები, ს
#     ტრიქონები, ლექსიკონები და კომპლექტები.

# Iterables-ის ძირითადი ცნებები
# განმარტება: iterable არის ობიექტი, რომელიც ახორციელებს __iter__() მეთოდს ან __getitem__() მეთოდს. ეს საშუალებას
# აძლევს პითონს თანმიმდევრულად აღადგინოს თავისი ელემენტები.

# Iterators: iterator არის ობიექტი, რომელიც წარმოადგენს მონაცემთა ნაკადს. ის იქმნება iterable-დან და ახორციელებს 
# __next__() მეთოდს, რომელიც აბრუნებს შემდეგ ელემენტს თანმიმდევრობით. როდესაც დასაბრუნებელი ელემენტი აღარ არის, 
# ის ბადებს StopIteration გამონაკლისს.

# საერთო იტერაბელები:

# სიები: ნივთების შეკვეთილი კოლექციები.
# ტუპლები: ნივთების უცვლელი შეკვეთილი კოლექციები.
# სიმები: სიმბოლოების თანმიმდევრობა.
# ლექსიკონები: გასაღები-მნიშვნელობის წყვილების კოლექციები (ლექსიკონში გამეორება იმეორებს მის კლავიშებს ნაგულისხმევად).
# კომპლექტი: უნიკალური ნივთების შეუკვეთავი კოლექციები.
# Iterables-ის მაგალითები


# 1. Lists

# სიები პითონში
# სია არის ჩაშენებული მონაცემთა სტრუქტურა Python-ში, რომელიც საშუალებას 
# გაძლევთ შეინახოთ ელემენტების კოლექცია. სიები არის დალაგებული, 
# ცვალებადი (ცვალებადი) და შეიძლება შეიცავდეს დუბლიკატ ელემენტებს. მათ
# შეუძლიათ შეინახონ მონაცემთა სხვადასხვა ტიპის ელემენტები, მათ შორის სხვა 
# სიები.

# სიების ძირითადი მახასიათებლები
# შეკვეთილი: სიის ერთეულებს აქვთ განსაზღვრული თანმიმდევრობა და ეს
# თანმიმდევრობა არ შეიცვლება, თუ თქვენ პირდაპირ არ შეცვლით სიას.
# ცვალებადი: თქვენ შეგიძლიათ შეცვალოთ, დაამატოთ ან წაშალოთ ელემენტები
# სიიდან მისი შექმნის შემდეგ.
# ნებას რთავს დუბლიკატებს: სიები შეიძლება შეიცავდეს იმავე მნიშვნელობის
# მრავალ მოვლენას.
# ჰეტეროგენული: სიებს შეუძლიათ შეინახონ მონაცემთა სხვადასხვა ტიპის 
# ელემენტები (მაგ., მთელი რიცხვები, სტრიქონები, სხვა სიები).


my_list = [1, 2, 3, 4, 5]
for item in my_list:
    print(item)

# 2. Tuples

# Tuple არის ჩაშენებული მონაცემთა სტრუქტურა Python-ში, რომელიც 
# საშუალებას გაძლევთ შეინახოთ ელემენტების კოლექცია. 
# ტუპლები სიების მსგავსია, მაგრამ მათ აქვთ რამდენიმე ძირითადი განსხვავება:

# ტუპლების ძირითადი მახასიათებლები
# შეკვეთილი: ერთეულებს აქვთ განსაზღვრული რიგი და ეს თანმიმდევრობა 
# არ შეიცვლება.
# Immutable: მას შემდეგ, რაც tuple შეიქმნა, თქვენ არ შეგიძლიათ შეცვალოთ
# მისი შინაარსი (ანუ, თქვენ არ შეგიძლიათ დაამატოთ, წაშალოთ ან შეცვალოთ 
#                ელემენტები).
# ნებას რთავს დუბლიკატებს: Tuples შეიძლება შეიცავდეს იგივე მნიშვნელობის
# მრავალ მოვლენას.
# ჰეტეროგენული: ტოპებს შეუძლიათ შეინახონ მონაცემთა სხვადასხვა ტიპის 
# ელემენტები (მაგ., მთელი რიცხვები, სტრიქონები, სხვა ტოტები).

my_tuple = (1, 2, 3)
for item in my_tuple:
    print(item)

# 3. Strings

# სტრიქონები პითონში
# სტრიქონი არის ჩაშენებული მონაცემთა ტიპი პითონში,
# რომელიც წარმოადგენს სიმბოლოების თანმიმდევრობას. სტრიქონები
# ფართოდ გამოიყენება ტექსტური მონაცემების შესანახად და 
# მანიპულირებისთვის. ისინი უცვლელია, რაც იმას ნიშნავს,
# რომ სტრიქონის შექმნის შემდეგ მისი შეცვლა შეუძლებელია.

# სიმების ძირითადი მახასიათებლები
# შეუცვლელი: სტრიქონების შეცვლა შეუძლებელია მათი შექმნის შემდეგ. 
# ნებისმიერი ოპერაცია, რომელიც თითქოს ცვლის სტრიქონს, რეალურად 
# შექმნის ახალ სტრიქონს.
# მოწესრიგებული: სტრიქონის სიმბოლოებს აქვთ განსაზღვრული მიმდევრობა
# და ეს თანმიმდევრობა არ შეიცვლება.
# მხარს უჭერს ინდექსირებას და დაჭრას: შეგიძლიათ ინდივიდუალურ
# სიმბოლოებზე ან ქვესტრიქონებზე წვდომა ინდექსირებისა და ჭრის გამოყენებით.

my_string = "Hello"
for char in my_string:
    print(char)

# 4. Dictionaries

# ლექსიკონები პითონში
# ლექსიკონი არის ჩაშენებული მონაცემთა სტრუქტურა Python-ში, რომელიც
# საშუალებას გაძლევთ შეინახოთ გასაღები-მნიშვნელობის წყვილების კოლექცია. 
# ლექსიკონები უწესრიგოა, ცვალებადი და 
# ინდექსირებულია კლავიშებით, რომლებიც შეიძლება იყოს ნებისმიერი უცვლელი
# ტიპის (როგორიცაა სტრიქონები, რიცხვები ან ტოპები).

# ლექსიკონების ძირითადი მახასიათებლები
# უწესრიგო: ლექსიკონში ერთეულებს არ აქვთ განსაზღვრული თანმიმდევრობა.
# Python 3.7-ის მდგომარეობით, ლექსიკონები ინარჩუნებენ ჩასმის თანმიმდევრობას
# , მაგრამ თქვენ არ უნდა დაეყრდნოთ ამას ლოგიკაზე.
# ცვალებადი: შეგიძლიათ შეცვალოთ, დაამატოთ ან წაშალოთ ერთეულები
# ლექსიკონიდან შექმნის შემდეგ.
# გასაღები-მნიშვნელობის წყვილები: ლექსიკონში თითოეული ელემენტი 
# ინახება წყვილის სახით, რომელიც შედგება გასაღებისა და მისი შესაბამისი
# მნიშვნელობისაგან. გასაღებები უნდა იყოს უნიკალური ლექსიკონში.

my_dict = {'a': 1, 'b': 2, 'c': 3}
for key in my_dict:
    print(key, my_dict[key])

# 5. Sets

# კომპლექტი პითონში
# კომპლექტი არის ჩაშენებული მონაცემთა სტრუქტურა Python-ში, რომელიც
# წარმოადგენს უნიკალური ელემენტების შეუკვეთებელ 
# კოლექციას. ნაკრები სასარგებლოა ნივთების შესანახად, როდესაც გსურთ 
# დარწმუნდეთ, რომ არ არის დუბლიკატები და როდესაც ელემენტების
# თანმიმდევრობას მნიშვნელობა არ აქვს.

# ნაკრების ძირითადი მახასიათებლები
# შეურიგებელი: კომპლექტის ელემენტებს არ აქვთ განსაზღვრული
# თანმიმდევრობა და თქვენ არ შეგიძლიათ ელემენტების წვდომა ინდექსის მიხედვით.
# ცვალებადი: შეგიძლიათ დაამატოთ ან ამოიღოთ ელემენტები ნაკრებიდან მისი 
# შექმნის შემდეგ.
# უნიკალური ელემენტები: ნაკრები არ შეიძლება შეიცავდეს დუბლიკატ 
# ელემენტებს. თუ ცდილობთ დუბლიკატის დამატებას, ის იგნორირებული იქნება.

my_set = {1, 2, 3}
for item in my_set:
    print(item)