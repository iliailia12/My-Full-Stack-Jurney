#  lesson37
#  Python AGGREGATION


# პითონის აგრეგაცია (Aggregation)
# აგრეგაცია არის ობიექტების ორი ტიპის ურთიერთობა ობიექტურად ორიენტირებულ პროგრამირებაში, სადაც ერთი ობიექტი შეიცავს სხვას, მაგრამ ამ ობიექტების ცხოვრება არ არის დამოკიდებული ერთმანეთს. ეს არის "one-to-many" ურთიერთობა, რომელშიც ერთი ობიექტი შეიძლება იყოს ბევრი სხვა ობიექტის ნაწილია, მაგრამ თითოეული ობიექტი შესაძლოა დამოუკიდებლად არსებობდეს.

# აგრეგაცია განსხვავდება კომპოზიციიდან იმით, რომ კომპოზიციაში, თუ მშობელი ობიექტი განადგურებულია, მისი შვილობი ელემენტები ასევე განადგურებულია, ხოლო აგრეგაციაში შვილობილი ობიექტები დამოუკიდებლად არსებობენ, როგორც ცალკეული ობიექტები.

# აგრეგაციის განმარტება:
# ერთობა და ნაწილობა: ერთი ობიექტი "აგრეგირებს" სხვა ობიექტებს, ანუ ფლობს მათ, მაგრამ მას არ აქვს მათი ცხოვრების კონტროლი.
# დამოუკიდებლობა: შვილობილი ობიექტები შეიძლება არსებობდნენ დამოუკიდებლად (შევთანხმებით, რომ ეს არც მათი შექმნა, არც მათი განადგურება დამოკიდებულია მშობელ ობიექტზე).
# აგრეგაციის მაგალითი:
# მოდით, განვიხილოთ მაგალითი, სადაც University (უნივერსიტეტი) არის მშობელი ობიექტი, ხოლო Student (სტუდენტი) შვილობილი ობიექტებია.


class Student:
    def __init__(self, name):
        self.name = name

    def get_name(self):
        return self.name

class University:
    def __init__(self, name):
        self.name = name
        self.students = []  
    def add_student(self, student):
        self.students.append(student)

    def get_students(self):
        return [student.get_name() for student in self.students]


student1 = Student("Alice")
student2 = Student("Bob")


university = University("Tech University")
university.add_student(student1)
university.add_student(student2)


print(f"Students in {university.name}: {university.get_students()}")


# University ობიექტი აგრეგირებს Student ობიექტებს, რაც ნიშნავს, რომ უნივერსიტეტი შეიცავს სტუდენტებს.
# University და Student ობიექტები დამოუკიდებლად არსებობენ. მაგალითად, სტუდენტებს შეუძლიათ არსებობა გარეშე უნივერსიტეტის (მაგალითად, სხვა უნივერსიტეტში გადაბარგება), ხოლო უნივერსიტეტი შეიძლება ჰქონდეს სხვადასხვა სტუდენტები.
# აგრეგაციის მთავარი იდეა ისაა, რომ ობიექტი (ამ შემთხვევაში University) ფლობს სხვა ობიექტებს (სტუდენტებს), მაგრამ ამ ობიექტებს დამოუკიდებლად შეუძლიათ არსებობა.
# აგრეგაცია vs. კომპოზიცია:
# აგრეგაცია:

# ურთიერთობა არის "one-to-many", მაგრამ შვილობილი ობიექტები დამოუკიდებლად არსებობენ.
# თუ მშობელი ობიექტი განადგურებულია, შვილობილი ობიექტები არ განადგურებულან (მათ შეუძლიათ არსებობა სხვა კონტექსტში).
# კომპოზიცია:

# კომპოზიცია უფრო მძლავრია, რადგან თუ მშობელი ობიექტი განადგურებულია, შვილობილი ობიექტებიც განადგურებულები არიან.
# კლასიკური მაგალითია "სახლი" და "ოთახები". თუ სახლი განადგურებულია, ოთახები აღარ არსებობს.
# კომპოზიციის მაგალითი:

class Room:
    def __init__(self, room_name):
        self.room_name = room_name

    def get_room(self):
        return self.room_name

class House:
    def __init__(self, house_name):
        self.house_name = house_name
        self.rooms = []  # House is composed of rooms

    def add_room(self, room):
        self.rooms.append(room)

    def get_rooms(self):
        return [room.get_room() for room in self.rooms]


room1 = Room("Living Room")
room2 = Room("Bedroom")


house = House("My House")
house.add_room(room1)
house.add_room(room2)


print(f"Rooms in {house.house_name}: {house.get_rooms()}")



# კომპოზიცია: House და Room კლასები ტრადიციულად შედგებიან ერთმანეთისგან
#  ისე, რომ თუ House დაიშალა, მისი ყველა Room ავტომატურად 
# განადგურებულია.
# აგრეგაცია: University და Student ურთიერთობა უფრო ღიაა, რადგან 
# Student-ებს შეუძლიათ დამოუკიდებლად არსებობა სხვა კონტექსტებში.
# აგრეგაციის მთავარ მიზანს წარმოადგენს:
# ერთი ობიექტი (მშობელი) "აგრეგირებს" სხვა ობიექტებს (შვილობილი).
# შვილობილი ობიექტები დამოუკიდებლად არსებობენ, ანუ მათი არსებობა
#  არ არის დამოკიდებული მშობელ ობიექტზე.
# დასკვნა
# აგრეგაცია წარმოადგენს ობიექტებს შორის "დაბალი კავშირების"
#  ერთ-ერთ ფორმას, სადაც ერთი ობიექტი, როგორც წესი, რამდენიმე 
# სხვა ობიექტს იტევს, მაგრამ ეს არაა ტოტალური დამოკიდებულება. 
# პითონში აგრეგაციის გამოყენება საშუალებას აძლევს, რომ ობიექტებს
#  ჰქონდეთ ურთიერთობა, რომელიც უფრო მოქნილია და ინდივიდუალური 
# ცალკეული ობიექტების სიცოცხლესთან 
# შესაბამისია.