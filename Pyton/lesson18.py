# lesson18.py
# Functions in Python 

# n პითონში, ფუნქციები არის მრავალჯერადი გამოყენების კოდის ბლოკები, 
# რომლებიც ასრულებენ კონკრეტულ დავალებას. ფუნქციები საშუალებას გაძლევთ 
# დაშალოთ თქვენი კოდი უფრო პატარა, მართვად სექციებად, რაც გახდის მას
# უფრო ორგანიზებულ და უფრო მარტივ შენარჩუნებას.


# 1. ფუნქციის განსაზღვრა
# ფუნქცია Python-ში განისაზღვრება def საკვანძო სიტყვის გამოყენებით,
# რასაც მოჰყვება ფუნქციის სახელი, ფრჩხილები () (შესაძლოა პარამეტრებით)
# და ორწერტილი :. ჩაღრმავებული კოდის ბლოკი განმარტების ქვეშ არის ფუნქციის 
# სხეული.

def greet(name):
    print(f"Hello, {name}!")


# 2. ფუნქციის გამოძახება
# ფუნქციის შესასრულებლად, თქვენ მას უწოდებთ მის სახელს,
# რასაც მოჰყვება ფრჩხილები, სურვილისამებრ გადასცემთ მისთვის საჭირო 
# ნებისმიერ არგუმენტს.

greet("Alice")  


# 3. პარამეტრები და არგუმენტები
# პარამეტრები არის ცვლადები, რომლებიც ჩამოთვლილია ფრჩხილებში 
# ფუნქციის განსაზღვრისას.
# არგუმენტები არის მნიშვნელობები, რომლებიც გადაეცემა ფუნქციას მისი 
# გამოძახებისას.

def add(a, b):
    return a + b

result = add(5, 3) 
print(result) 

# 4. დაბრუნების განცხადება
# ფუნქციას შეუძლია დააბრუნოს მნიშვნელობა დაბრუნების საკვანძო 
# სიტყვის გამოყენებით. ეს მნიშვნელობა შეიძლება იყოს შენახული 
# ცვლადში, დაბეჭდილი ან
# გამოსახულებაში გამოყენება.



def square(x):
    return x ** 2

result = square(4)  


# 5. ნაგულისხმევი არგუმენტები
# ფუნქციებს შეიძლება ჰქონდეს ნაგულისხმევი მნიშვნელობები 
# არგუმენტებისთვის, რომლებიც გამოიყენება თუ არგუმენტი 
# არ არის მოწოდებული ფუნქციის გამოძახების დროს.


def greet(name, greeting="Hello"):
    print(f"{greeting}, {name}!")

greet("Alice")  
greet("Bob", "Good evening")  


# 6. Keyword Arguments
# თქვენ შეგიძლიათ გადასცეთ არგუმენტები ფუნქციას პარამეტრის სახელის
# მკაფიოდ მითითებით, რაც საშუალებას გაძლევთ 
# გადასცეთ არგუმენტები ნებისმიერი თანმიმდევრობით.


def display_info(name, age, city):
    print(f"{name} is {age} years old and lives in {city}.")

display_info(age=25, name="John", city="New York")




# 7. ლამბდას ფუნქციები
# ლამბდა ფუნქციები არის მცირე ანონიმური ფუნქციები,
# რომლებიც განსაზღვრულია ლამბდა საკვანძო სიტყვით. ისინი
# ხშირად გამოიყენება მოკლე, გადაყრის ფუნქციებისთვის.


add = lambda x, y: x + y
print(add(2, 3))  


#  Function Scope
# ლოკალური ფარგლები: ფუნქციის შიგნით განსაზღვრული ცვლადები 
# ამ ფუნქციის ლოკალურია.
# გლობალური ფარგლები: ნებისმიერი ფუნქციის გარეთ განსაზღვრული
# ცვლადები გლობალურია და მათი წვდომა შესაძლებელია
# ფუნქციების შიგნით (თუ ცალსახად არის გამოცხადებული).


x = 10  

def my_function():
    x = 5  
    print(f"Local x: {x}")  

my_function()
print(f"Global x: {x}")  


# Nested Functions
# თქვენ შეგიძლიათ განსაზღვროთ ფუნქციები სხვა ფუნქციებში. ამ 
# ფუნქციებს უწოდებენ ჩადგმულ ფუნქციებს. შიდა
# ფუნქციას შეუძლია ცვლადებზე წვდომა გარე ფუნქციიდან.

def outer_function():
    message = "Hello"
    
    def inner_function():
        print(message)
    
    inner_function()

outer_function()  


# Recursion
# ფუნქციას შეუძლია საკუთარი თავის გამოძახება, რაც 
# ცნობილია როგორც რეკურსი. რეკურსია სასარგებლოა პრობლემებისთვის,
# რომლებიც შეიძლება დაიყოს მცირე ქვეპრობლემებად.

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

print(factorial(5))  




#  Docsstrings
# You can include documentation inside functions 
# using a docstring, which is a string literal right after the 
# def line. It helps explain the function's purpose, parameters,
# and return values.



def multiply(x, y):
    """
    Multiplies two numbers and returns the result.

    Parameters:
    x (int or float): First number
    y (int or float): Second number

    Returns:
    int or float: The product of x and y
    """
    return x * y



# ძირითადი ცნებების შეჯამება:
# ფუნქციების განსაზღვრა: გამოიყენეთ def ფუნქციების განსაზღვრისთვის.
# არგუმენტები და პარამეტრები: ფუნქციებს შეუძლიათ მიიღონ პარამეტრები,
# რომლებიც გადაეცემა არგუმენტებად.
# დაბრუნების განცხადება: ფუნქციებს შეუძლიათ დააბრუნონ მნიშვნელობები.
# ნაგულისხმევი არგუმენტები: ნაგულისხმევი მნიშვნელობები პარამეტრებისთვის, თუ არგუმენტი არ არის გადაცემული.
# ლამბდას ფუნქციები: მცირე ანონიმური ფუნქციები.
# Variable Scope: ლოკალური და გლობალური ცვლადები ფუნქციებში.
# რეკურსია: ფუნქციები, რომლებიც საკუთარ თავს ეძახიან განმეორებით ამოცანებს.