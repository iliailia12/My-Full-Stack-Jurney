#lesson17.py
# Python dictionaries 
# პითონში ლექსიკონი არის ჩაშენებული მონაცემთა სტრუქტურა, რომელიც ინახავს გასაღები-მნიშვნელობის წყვილებს. ის საშუალებას 
# გაძლევთ დააფიქსიროთ უნიკალური გასაღები შესაბამის მნიშვნელობაზე, რაც შესაძლებელს გახდის მონაცემთა ეფექტური მოძიებას. 
# ლექსიკონები ძალიან მრავალმხრივია და ფართოდ გამოიყენება პითონში, რადგან ისინი უზრუნველყოფენ მონაცემთა სწრაფ წვდომას.

# პითონის ლექსიკონების მახასიათებლები:
# უწესრიგო: ლექსიკონები არ ინარჩუნებენ ელემენტების თანმიმდევრობას (თუმცა Python 3.7-დან მოყოლებული, ლექსიკონები ინარჩუნებენ 
#                                                                  ჩასმის წესრიგს, როგორც განხორციელების დეტალს).
# ცვალებადი: ლექსიკონები შეიძლება შეიცვალოს შექმნის შემდეგ გასაღები-მნიშვნელობის წყვილების დამატებით, წაშლით ან შეცვლით.
# გასაღებები უნდა იყოს უნიკალური: ლექსიკონში თითოეული გასაღები უნიკალური უნდა იყოს.
# კლავიშები უცვლელია: კლავიშები უნდა იყოს უცვლელი ტიპები (მაგ., სტრიქონები, რიცხვები, ტოპები).
# მნიშვნელობები შეიძლება იყოს ნებისმიერი ტიპის: ლექსიკონში მნიშვნელობები შეიძლება იყოს ნებისმიერი ტიპის, სხვა ლექსიკონების, 
# სიების ან თუნდაც ფუნქციების ჩათვლით.


# მნიშვნელობებზე წვდომა:
# შეგიძლიათ ლექსიკონის მნიშვნელობაზე წვდომა მისი გასაღების გამოყენებით.

my_dict = {"name": "Alice", "age": 25, "city": "New York"}
print(my_dict["name"])  
print(my_dict["age"])   

# 2. გასაღები-ღირებულების წყვილების დამატება ან განახლება:
# შეგიძლიათ დაამატოთ გასაღები-მნიშვნელობის ახალი წყვილები ან განაახლოთ არსებული, უბრალოდ გასაღებისთვის მნიშვნელობის მინიჭებით.
my_dict["email"] = "alice@example.com"  
my_dict["age"] = 26  
print(my_dict)


# 3. ნივთების ამოღება:
# შეგიძლიათ წაშალოთ ელემენტები del, pop() ან popitem():
# del-ის გამოყენება: ამოიღებს ელემენტს გასაღებით.

del my_dict["age"]
print(my_dict)


# გამოყენებით pop(): შლის ელემენტს გასაღებით და აბრუნებს მნიშვნელობას.
city = my_dict.pop("city")
print(city)  
print(my_dict)  


# Using popitem(): შლის და აბრუნებს ბოლო გასაღები-მნიშვნელობის წყვილს.
last_item = my_dict.popitem()
print(last_item)  
print(my_dict)  

# 4. გასაღების არსებობის შემოწმება:
# შეგიძლიათ შეამოწმოთ არის თუ არა გასაღები ლექსიკონში საკვანძო სიტყვის გამოყენებით.
if "name" in my_dict:
    print("Name exists in the dictionary.") 


# 5. გასაღებებზე, ღირებულებებსა და ერთეულებზე წვდომა:
# შეგიძლიათ მიიღოთ ყველა გასაღები, ყველა მნიშვნელობა ან ყველა გასაღები-მნიშვნელობის წყვილი შემდეგი მეთოდების გამოყენებით:

# keys(): აბრუნებს ხედვის ობიექტს, რომელიც აჩვენებს ყველა გასაღების სიას.
keys = my_dict.keys()
print(keys)  

# values(): აბრუნებს ხედვის ობიექტს, რომელიც აჩვენებს ყველა მნიშვნელობის სიას.
values = my_dict.values()
print(values) 
# items(): აბრუნებს ხედვის ობიექტს, რომელიც აჩვენებს ყველა გასაღები-მნიშვნელობის წყვილს.
items = my_dict.items()
print(items)


# 6. ლექსიკონის კოპირება:
# შეგიძლიათ შექმნათ ლექსიკონის ზედაპირული ასლი copy() მეთოდის გამოყენებით.
new_dict = my_dict.copy()
print(new_dict)  


# ლექსიკონის გაგება:
# თქვენ შეგიძლიათ შექმნათ ლექსიკონები ლექსიკონის გაგების გამოყენებით, რომელიც სიის გაგების მსგავსია, მაგრამ მუშაობს ლექსიკონებისთვის.

squared_numbers = {x: x**2 for x in range(5)}
print(squared_numbers)

# ჩადგმული ლექსიკონები:
# ლექსიკონები შეიძლება შეიცავდეს სხვა ლექსიკონებს, როგორც მნიშვნელობებს, რაც შესაძლებელს გახდის შექმნას წყობილი სტრუქტურები (2D ან მრავალ დონის ლექსიკონები).

nested_dict = {
    "person1": {"name": "Alice", "age": 25},
    "person2": {"name": "Bob", "age": 30}
}
print(nested_dict["person1"]["name"]) 



# ლექსიკონის შექმნა
student = {
    "name": "John",
    "age": 21,
    "courses": ["Math", "Physics"]
}

# მნიშვნელობებზე წვდომა
print(student["name"])  
print(student["courses"])  

# მნიშვნელობების შეცვლა
student["age"] = 22
print(student["age"])  

# ახალი გასაღები-მნიშვნელობის წყვილის დამატება
student["graduation_year"] = 2025
print(student)  

# გასაღები-მნიშვნელობის წყვილის ამოღება
del student["courses"]
print(student)  


# ლექსიკონების გამოყენების # უპირატესობები:
# სწრაფი ძიება: ლექსიკონები უზრუნველყოფენ მუდმივი დროის სირთულის (O(1)) ძიებას, რაც მათ უფრო სწრაფს ხდის, ვიდრე სიები, როდესაც საქმე ეხება კლავიშის საშუალებით მონაცემებზე წვდომას.
# ეფექტური გასაღები-მნიშვნელობის წყვილებისთვის: იდეალურია, როდესაც გჭირდებათ მონაცემების შენახვა და სწრაფი წვდომა უნიკალური იდენტიფიკატორის (გასაღების) საშუალებით.
# მოქნილი: შეგიძლიათ შეინახოთ სხვადასხვა ტიპის მონაცემთა მნიშვნელობები (სტრიქონები, რიცხვები, სიები, სხვა ლექსიკონები და ა.შ.).
# რეზიუმე:
# Dictionaries არის მრავალმხრივი და ძლიერი მონაცემთა სტრუქტურა Python-ში გასაღები-მნიშვნელობის წყვილების შესანახად და მანიპულირებისთვის.
# ისინი ცვალებადია და იძლევა სწრაფ ძიებას, განახლებებსა და წაშლას.
# გასაღებები უნდა იყოს უნიკალური და უცვლელი, ხოლო მნიშვნელობები შეიძლება იყოს ნებისმიერი ტიპის მონაცემთა.