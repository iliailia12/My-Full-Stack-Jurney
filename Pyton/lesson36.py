#  lesson36
#  Python DUCK TYPING 

# პითონის "Duck Typing" (იხვის აკრეფა)
# Duck Typing არის კონცეფცია, რომელიც კოდის დასაწერად იყენებს იმ გზას, 
# რომ არ აქვს მნიშვნელობა კონკრეტული ობიექტის ტიპი, თუ ის ახორციელებს
# გარკვეული მეთოდების შესრულებას. როგორც პიტონის ენა
# დინამიურად ტიპირებულია, არ არის აუცილებელი, რომ ობიექტი კონკრეტულ 
# კლასს ეკუთვნოდეს, მთავარია, რომ მას ჰქონდეს შესაბამისი ქცევა ან მეთოდები.

# "

# პითონში ამ იდეას იტყვით, რომ თუ ობიექტს აქვს კონკრეტული მეთოდები 
# ან ქცევები, მაშინ მას შეიძლება მოიხმაროთ როგორც შესაბამისი ტიპი,
# მიუხედავად მისი კლასისა. ეს არის Duck Typing-ის ძირითადი კონცეფცია.

# პითონის Duck Typing-ი
# პითონში, როცა ობიექტი გადაეცემა ფუნქციას, რომელიც კონკრეტულ 
# ქცევას ეძებს (მაგალითად, მეთოდებს), პროგრამა არ ამოწმებს მისი ტიპის 
# შესაბამისობას. მთავარია, რომ ობიექტი იძლეოდეს იმ ქცევას, რომელსაც 
# ფუნქცია ელოდება.

# Duck Typing-ის მახასიათებლები:
# კონკრეტული ტიპის გადამოწმების გარეშე: პითონის კოდი არ იყენებს 
# isinstance() ან მსგავს მეთოდებს, რადგანაც საკმარისია, რომ ობიექტი 
# შეიცავდეს საჭირო მეთოდებს.

# მოწყობილობა და მოქნილობა: ობიექტი შეიძლება იყოს ნებისმიერი კლასი,
# თუ ის აკეთებს იმას, რასაც ველით (რომელიმე ფუნქციონალურ ქცევას).

# ბევრი განსხვავებული ტიპი: ერთი და იგივე ფუნქცია ან მეთოდი შეიძლება
# მუშაობდეს სხვადასხვა ტიპის ობიექტებზე, რომლებიც განსხვავდებიან 
# ერთმანეთისგან, მაგრამ ახორციელებენ ერთსა და იმავე ქცევას.

# Duck Typing-ის დადებითი მხარეები:
# გარდატეხის ადვილად განხორციელება: ახალი კლასის შექმნა,
# რომელიც ახორციელებს იმავე ქცევას (მაგალითად, speak()), საშუალებას
# იძლევა, რომ ის გამოყენებულ იქნას ისეთივე ფორმით, როგორც ძველი კლასები.


# მოდულურობა: ამის საშუალებით, კლასები ნაკლებად არიან ერთმანეთზე
# დამოკიდებული. მთავარია, რომ ისინი აასრულონ ერთნაირი ქცევები.

# დამოკიდებულება ქცევაზე, არ კლასზე: თქვენ შეგიძლიათ შექმნათ 
# "ყველაფერი, რაც გვჭირდება", თუ ის ახორციელებს საჭირო ქცევას 
# (მაგალითად, speak(), run(), fly()).

# Duck Typing-ი და "ამოცანა ტიპები"


# Duck Typing არის მოქნილი და პრაქტიკული მიდგომა, რომელიც საშუალებას 
# გვაძლევს მივუდგეთ ობიექტებს მათი ქცევით, არამედ მათი 
# კლასის მიხედვით.
# Python-ის ფლექსიბილობა და დინამიური ტიპირება ხელს უწყობს, რომ 
# სერიოზული ტიპის ამოწმება და გამონაკლისები არ იყოს საჭირო, სანამ 
# ობიექტი ახორციელებს საჭირო ქცევას.
# Duck Typing ხელს უწყობს კოდის მოდულურობას, რადგან არც კლასის სახელი, 
# არც ტიპი არ არის გადამწყვეტი, არამედ მეთოდები და მათი გამართვა.


class Bird:
    def fly(self):
        print("Bird is flying")

class Airplane:
    def fly(self):
        print("Airplane is flying")

def let_it_fly(flyable):
    flyable.fly()  


bird = Bird()
airplane = Airplane()

let_it_fly(bird)      
let_it_fly(airplane) 
