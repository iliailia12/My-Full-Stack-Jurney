// ES6 Classes
// კლასი JavaScript-ში არის ობიექტების შექმნის შაბლონი, რომელიც საშუალებას გაძლევთ განსაზღვროთ თვისებები და მეთოდები, რომლებიც ამ ობიექტებს ექნებათ. კლასები ES6-დან 
// (ECMAScript 2015) არის სინტაქსური შრე, რომელიც უფრო მკაფიოდ და მარტივად გამოხატავს ობიექტზე ორიენტირებულ პროგრამირებას.
 
// ES6 Map & Set
// ES6 Map & Set არის ახალი მონაცემთა სტრუქტურები, რომლებიც ECMAScript 2015 (ES6)-ში დაინერგა. ისინი უფრო მოქნილი და ეფექტური ალტერნატივებია ტრადიციული ობიექტებისა და მასივებისთვის.

// Map
// Map არის მონაცემთა სტრუქტურა, რომელიც საშუალებას გაძლევთ შეინახოთ წყვილები key-value ფორმატში, სადაც:

// Key შეიძლება იყოს ნებისმიერი ტიპის (ობიექტი, ფუნქცია, პრიმიტივი).
// Value არის შესაბამისი მნიშვნელობა.
// მახასიათებლები:
// უნიკალური გასაღებები (Keys): თითოეულ გასაღებს აქვს მხოლოდ ერთი მნიშვნელობა.
// შენახვის თანმიმდევრობა: ელემენტები ინახება ჩასმის თანმიმდევრობით.
// მეთოდები:
// set(key, value) - ელემენტის დამატება.
// get(key) - მნიშვნელობის მიღება გასაღებით.
// delete(key) - ელემენტის წაშლა.
// has(key) - გასაღების არსებობის შემოწმება.
// clear() - ყველა ელემენტის წაშლა.
// size - ელემენტების რაოდენობა.

const map = new Map();
map.set('name', 'John');
map.set('age', 30);

console.log(map.get('name')); 
console.log(map.has('age')); 
map.delete('age');
console.log(map.size); 



// Set
// Set არის მონაცემთა სტრუქტურა, რომელიც ინახავს უნიკალურ მნიშვნელობებს (დუბლიკატების გარეშე).

// მახასიათებლები:
// უნიკალური მნიშვნელობები: დუბლიკატები ავტომატურად იშლება.
// შენახვის თანმიმდევრობა: ელემენტები ინახება ჩასმის თანმიმდევრობით.
// მეთოდები:
// add(value) - ელემენტის დამატება.
// delete(value) - ელემენტის წაშლა.
// has(value) - ელემენტის არსებობის შემოწმება.
// clear() - ყველა ელემენტის წაშლა.
// size - ელემენტების რაოდენობა.


const set = new Set();
set.add(1);
set.add(2);
set.add(2);

console.log(set.has(1)); 
console.log(set.size); 
set.delete(1);
console.log(set.size); 

