/*
1. Introduction to Ecmascript6 (ES6)

Ecmascript6 (ES6) არის JavaScript-ის ახალი ვერსია, რომელიც გამოქვეყნდა 2015 წელს. 
იგი მოიცავს მრავალ ახალ ფუნქციას და გაუმჯობესებას, რაც ამარტივებს კოდის წერას და ზრდის მის ეფექტურობას.

ES5 და ES6-ის ძირითადი განსხვავებები:
1. Let და Const:
    ES6-ში წარმოდგენილია let და const, რომლებიც ცვლადების განსაზღვრის ახალი გზებია.
    ES5-ში გამოიყენებოდა მხოლოდ var.

2. Arrow ფუნქციები:
    ES6-ში წარმოდგენილია ახალი სინტაქსი ფუნქციებისთვის (=>), რაც ამარტივებს ფუნქციების წერას.

3. Template Literals:
    ES6-ში შესაძლებელია ტექსტის ჩასმა `${}` სინტაქსით, რაც ამარტივებს სტრიქონების მანიპულაციას.

4. Classes:
    ES6-ში წარმოდგენილია კლასების ახალი სინტაქსი, რაც ობიექტზე ორიენტირებულ პროგრამირებას უფრო მარტივს ხდის.

5. Modules:
    ES6-ში შესაძლებელია კოდის მოდულებად დაყოფა და მათი ექსპორტი/იმპორტი.

6. Promises:
    ES6-ში წარმოდგენილია Promises, რაც ამარტივებს ასინქრონული კოდის მართვას.

ეს მხოლოდ რამდენიმე მაგალითია ES5 და ES6-ის განსხვავებების. ES6-ის დანერგვამ JavaScript უფრო თანამედროვე და მოქნილი გახადა.
*/


// 1.Let და Const:

// ES5: ცვლადების განსაზღვრა ხდება var-ით.
// ES6: წარმოდგენილია let და const, რომლებიც უზრუნველყოფენ ბლოკის სკოპს და კონსტანტების განსაზღვრას.

// ES5
var x = 10;

// ES6
let y = 20;
const z = 30;

// 2.Arrow ფუნქციები:

// ES5: ფუნქციები განისაზღვრება function საკვანძო სიტყვით.
// ES6: წარმოდგენილია მოკლე სინტაქსი => ოპერატორით.

// ES5
var add = function(a, b) {
    return a + b;
};

// ES6
const add = (a, b) => a + b;

// 3
// Template Literals:

// ES5: სტრიქონების გაერთიანება ხდება + ოპერატორით.
// ES6: გამოიყენება backtick () და ${}` სინტაქსი.

// ES5
var greeting = "Hello, " + name + "!";

// ES6
const greeting = `Hello, ${name}!`;

// ეს არის ძირითადი განსხვავებები ES5-სა და ES6-ს შორის, რაც ES6-ს უფრო მოქნილ და თანამედროვე ენად აქცევს.ეს არის ძირითადი განსხვავებები ES5-სა და ES6-ს შორის, რაც ES6-ს უფრო მოქნილ და თანამედროვე ენად აქცევს.

// მგონი უკვე მიხვდით  