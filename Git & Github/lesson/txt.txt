Git ინსტალაციის ბრძანებები
აქ არის Git ინსტალაცია სხვადასხვა ოპერაციული სისტემებისთვის:
git - commands გითის ყველა ბრძანების ნახვა
git branch -  check current branches ახლანდელი ტოტების შემოწმება
git branch -c branch_name - create new branch ახალი ტოტის შექმნა
git checkout branch_name - სხვა ტოტზე გადასვლა

pull request

fork repository
git clone https://github.com/your-username/repository-name.git
git remote set-url origin https://github.com/your-username/repository-name.git
git remote add upstream https://github.com/original-owner/repository-name.git
git branch new_branch
git checkout
git add .
git commit -m "update"
git push origin new_branch

OPTIONAL: to download changes from github if they were made in original repository
git remote add upstream https://github.com/ORIGINAL-OWNER/ORIGINAL-REPO.git

git fetch upstream
git checkout main
git merge upstream/mai
[8:58 AM]
ეს ბრძანებები მაქვს შენახული
[8:58 AM]
ამაზე მეტი არ დამჭირვებია მე ჯერჯერობით

 

Git for Windows დამოუკიდებელი ინსტალერი. დამატებითი ინფორმაციისთვის წაიკითხეთ აქ
$ brew დააინსტალირეთ git Install Git Homebrew-ით Mac OS-ზე
$ sudo port selfupdate დააინსტალირეთ Git MacPorts– ით Mac OS– ზე
$ sudo apt-get install git Install Command for Linux
$ git - ვერსია აჩვენებს თქვენი Git- ის მიმდინარე ვერსიას
Git კონფიგურაცია და კონფიგურაცია
აქ არის Git კონფიგურაციის და დაყენების ბრძანებები:

 

 

 git config – გლობალური user.name "შენი სახელი" დააყენეთ თქვენი მომხმარებლის სახელი გლობალურად.
git config – გლობალური user.email "youremail@example.com" დააყენეთ თქვენი ელ.ფოსტა გლობალურად.
git config –global color.ui auto – ტერმინალში ფერადი გამომავალი ჩვენების დაყენება
git დახმარება ძირითადი დახმარების დოკუმენტაციის ჩვენებაში, რომელიც აჩვენებს ხშირად გამოყენებული Git ბრძანებების ჩამონათვალს.
საცავის ინიციალიზაცია
აქ არის Git საცავის ბრძანებების ინიციალიზაცია:





 

 

git init Initializes ახალი Git საცავი მიმდინარე დირექტორიაში.
git init <directory> ქმნის ახალ Git საცავს მითითებულ დირექტორიაში.
git კლონი <repository_url> ეს Clones საცავი დისტანციური სერვერიდან თქვენს ადგილობრივ მანქანამდე.
git კლონი - ფილიალი <branch_name> <repository_url> კლონები კონკრეტული ფილიალი საცავიდან.
ძირითადი Git ბრძანებები
აქ მოცემულია რამდენიმე ძირითადი Git ბრძანება:

 

 
 
git <file> დაამატეთ კონკრეტული ფაილი დადგმის ზონაში.
git დამატება . ან git დამატება - ყველა დასძენს ყველა შეცვლილ და ახალ ფაილს დადგმის ზონაში.
git სტატუსი აჩვენებს თქვენი საცავის ამჟამინდელ მდგომარეობას, მათ შორის თვალყურს ადევნებულ და დაუკვირვებელ ფაილებს, მოდიფიცირებულ ფაილებს და ფილიალის ინფორმაციას.
git სტატუსი - იგნორირებული მონიტორები იგნორირებული ფაილები გარდა რეგულარული სტატუსის გამომავალი.
git diff აჩვენებს ცვლილებებს სამუშაო დირექტორიასა და დადგმის არეალს (ინდექსი) შორის.
git diff <commit1> <commit2> აჩვენებს განსხვავებებს ორ ვალდებულებას შორის.
git diff – დადგმული ან git diff - ქეშირებული აჩვენებს ცვლილებებს დადგმის არეალს (ინდექსს) და ბოლო ვალდებულებას შორის.
git diff HEAD აჩვენებს განსხვავებას მიმდინარე დირექტორიასა და ბოლო ვალდებულებას შორის
git commit ქმნის ახალ ვალდებულებას დადგმის არეალში ცვლილებებით და ხსნის ნაგულისხმევ ტექსტურ რედაქტორს ჩადენის შეტყობინების დასამატებლად.
 git commit -m "<message>" ან git commit -message "<message>" ქმნის ახალ ვალდებულებას დადგმის არეალში ცვლილებებით და განსაზღვრავს ჩადენის შეტყობინებას.
git commit -a ან git commit - ყველა Commits ყველა შეცვლილი და წაშლილი ფაილი საცავში, git დამატების მკაფიოდ გამოყენების გარეშე, ცვლილებების დასადგმად.
git შენიშვნები დამატება ქმნის ახალ ნოტს და უკავშირებს მას ობიექტს (ვალდებულება, ტეგი და ა.შ.).
git აღდგენა <file> აღადგენს ფაილს სამუშაო დირექტორიაში თავის მდგომარეობაში ბოლო ვალდებულებაში.
git გადატვირთვა <commit> გადადის ფილიალის მაჩვენებლის მითითებულ ვალდებულებაზე, გადატვირთვის დადგმის არეალი და სამუშაო დირექტორია, რათა შეესაბამებოდეს მითითებულ ვალდებულებას.
git გადატვირთვა - რბილი <commit> გადადის ფილიალის მაჩვენებელი მითითებულ ვალდებულებაში, ინარჩუნებს ცვლილებებს დადგმის ზონაში და სამუშაო დირექტორიაში.
git გადატვირთვა - მყარი <commit> გადადის ფილიალის მაჩვენებელი მითითებულ ვალდებულებაზე, უგულებელყოფს ყველა ცვლილებას დადგმის ზონაში და სამუშაო დირექტორიაში, ეფექტურად გადატვირთეთ საცავი მითითებულ ვალდებულებაზე.
git rm <file> > შლის ფაილს როგორც სამუშაო დირექტორიიდან, ასევე საცავიდან, წაშლის დადგმა. git mv Moves ან renames ფაილი ან დირექტორია თქვენს Git საცავში.
Also, check: Basic Git  with Examples


 Git Commit (განახლებული ბრძანებები)
აქ მოცემულია რამდენიმე განახლებული Git ჩადენისთვის:


 
git commit -m "feat: message" შექმენით ახალი ვალდებულება Git საცავში კონკრეტული შეტყობინებით, რათა მიუთითოთ ახალი ფუნქცია, რომელიც ჩადენილია საცავში.
git commit -m "გამოსწორება: შეტყობინება" შექმენით ახალი ვალდებულება Git საცავში კონკრეტული შეტყობინებით, რათა დააფიქსიროს შეცდომები კოდებში
git commit -m "chore: message" შექმენით ახალი ვალდებულება Git საცავში კონკრეტული შეტყობინებით, რათა აჩვენოს რუტინული დავალებები ან ტექნიკური მომსახურება.
git commit -m "refactor: message" შექმენით ახალი ვალდებულება Git საცავში კონკრეტული შეტყობინებით, რომ შეცვალოთ კოდის ბაზა და გააუმჯობესოთ სტრუქტურა.
git commit -m "docs: message" შექმენით ახალი ვალდებულება Git საცავში კონკრეტული შეტყობინებით დოკუმენტაციის შესაცვლელად.
git commit -m "სტილი: შეტყობინება" შექმენით ახალი ვალდებულება Git საცავში კონკრეტული შეტყობინებით, რომ შეცვალოთ კოდების ბაზის სტილი და ფორმატირება.
git commit -m "ტესტი: შეტყობინება" შექმენით ახალი ვალდებულება Git საცავში კონკრეტული შეტყობინებით, რათა მიუთითოთ ტესტთან დაკავშირებული ცვლილებები.
git commit -m "perf: message" შექმენით ახალი ვალდებულება

 

 
 
git ფილიალი ჩამოთვლის ყველა ფილიალს საცავში.
git ფილიალი <branch-name> ქმნის ახალ ფილიალს მითითებული სახელით.
git ფილიალი -d <branch-name> წაშლის მითითებულ ფილიალს.
git ფილიალი - სიები ყველა ადგილობრივი და დისტანციური ფილიალი.
git ფილიალი -r ჩამოთვლის ყველა დისტანციურ ფილიალს.
git checkout <branch-name> კონცენტრატორები მითითებულ ფილიალში.
git checkout -b <new-branch-name> ქმნის ახალ ფილიალს და გადადის მასზე.
git გადახდა - <file> გადააგდეთ მითითებულ ფაილში განხორციელებული ცვლილებები და დაუბრუნეთ მას ბოლო ვალდებულებაში.
git შერწყმა <branch> აერთიანებს მითითებულ ფილიალს მიმდინარე ფილიალში.
git ჟურნალი აჩვენებს მიმდინარე ფილიალის ჩადენის ისტორიას. 

git log <branch-d აჩვენებს მითითებული ფილიალის ჩადენის ისტორიას. git ჟურნალი - <file> მიჰყევით ფაილის ჩადენის ისტორიას, მათ შორის მის სახელებს.
git ჟურნალი - ყველა აჩვენებს ყველა ფილიალის ჩადენის ისტორიას.
git stash Stashes ცვლილებები სამუშაო დირექტორია, რომელიც საშუალებას გაძლევთ გადახვიდეთ სხვა ფილიალში ან ჩაიდინოთ ცვლილებების ჩადენის გარეშე.
git stash სია სიები ყველა stashes საცავში.
git stash pop Applies და შლის უახლესი stash საწყისი stash სია.
git stash drop შლის უახლესი stash საწყისი stash სია.
git tag Lists ყველა ტეგები საცავში.
git tag <tag-name> ქმნის მსუბუქი tag მიმდინარე commit.
git tag <tag-name> <commit> ქმნის მსუბუქი tag მითითებული commit.
git tag -a <tag-name> -m "<message>" ქმნის ანოტირებული ტეგი მიმდინარე ვალდებულებას საბაჟო შეტყობინებით.
დისტანციური საცავები
აქ მოცემულია Git დისტანციური საცავების ბრძანებები:



 

 git fetch Retrieves იცვლება დისტანციური საცავიდან, მათ შორის ახალი ფილიალებიდან და ჩადენილი.
git fetch <remote> Retrieves იცვლება მითითებული დისტანციური საცავიდან.
git fetch –prune შლის დისტანციური თვალთვალის ნებისმიერ ფილიალს, რომელიც აღარ არსებობს დისტანციურ საცავში.
git გაიყვანოს Fetches ცვლილებები დისტანციური საცავიდან და აერთიანებს მათ მიმდინარე ფილიალში.
git <remote> გაიყვანოს Fetches ცვლილებები მითითებული დისტანციური საცავიდან და აერთიანებს მათ მიმდინარე ფილიალში.
git pull - rebase Fetches იცვლება დისტანციური საცავიდან და აახლებს მიმდინარე ფილიალს განახლებულ ფილიალში.
git push pushes ადგილობრივი ვალდებულება დისტანციური საცავი.
git push <remote> pushes ადგილობრივი ვალდებულება მითითებული დისტანციური საცავი.
git push <remote> <branch> pushes ადგილობრივი ვალდებულება მითითებული ფილიალი დისტანციური საცავი.
git push – ყველა Pushes ყველა ფილიალს დისტანციურ საცავში.
git დისტანციური სიები ყველა დისტანციური საცავი.
git დისტანციური დამატება <name> <url> დასძენს ახალ დისტანციურ საცავს მითითებული სახელით და URL. Git შედარება აქ მოცემულია Git შედარების ბრძანებები:

 

 

 git შოუ აჩვენებს კონკრეტული ჩადენის დეტალებს, მათ შორის მის ცვლილებებს.
git შოუ <commit> აჩვენებს მითითებული ჩადენის დეტალებს, მათ შორის მის ცვლილებებს.
Git მართვის ისტორია
აქ მოცემულია რამდენიმე Git მართვის ისტორიის ბრძანებები:
 

 

 git revert <commit> ქმნის ახალ ვალდებულებას, რომელიც აუქმებს მითითებული ჩადენის მიერ შემოღებულ ცვლილებებს.
git revert - არა-ვალდებულება <commit> გააუქმებს მითითებული ჩადენის მიერ შემოღებულ ცვლილებებს, მაგრამ არ ქმნის ახალ ვალდებულებას.
git rebase <branch> Reapplies იღებს ვალდებულებას მიმდინარე ფილიალში მითითებული ფილიალის წვერზე.
რატომ გამოვიყენოთ Git?
აქ მოცემულია რამდენიმე მიზეზი, რის გამოც შეიძლება დაგჭირდეთ Git- ის გამოყენება:


 თვალყური ადევნეთ თქვენს კოდში ცვლილებებს
ითანამშრომლეთ პროექტებზე სხვებთან
ორგანიზებული კოდის ისტორიის შენარჩუნება
საჭიროების შემთხვევაში ადვილად დაუბრუნდით წინა ვერსიებს
ეფექტურად გაათავისუფლეთ თქვენი კოდი და მართეთ ვერსიები
გააუმჯობესეთ პროდუქტიულობა და კოდის მთლიანობა პროგრამული უზრუნველყოფის შემუშავებაში.